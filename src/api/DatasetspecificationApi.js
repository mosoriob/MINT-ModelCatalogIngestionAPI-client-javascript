/**
 * Model Catalog
 * This is MINT Model Catalog You can find out more about     Model Catalog at [https://w3id.org/mint/modelCatalog/](https://w3id.org/mint/modelCatalog/)
 *
 * OpenAPI spec version: 0.0.2
 * Contact: mosorio@isi.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DatasetSpecification from '../model/DatasetSpecification';

/**
* Datasetspecification service.
* @module api/DatasetspecificationApi
* @version 0.0.2
*/
export default class DatasetspecificationApi {

    /**
    * Constructs a new DatasetspecificationApi. 
    * @alias module:api/DatasetspecificationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createDataSet operation.
     * @callback module:api/DatasetspecificationApi~createDataSetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a datasetspecification
     * Creates a new instance of a `datasetspecification`.
     * @param {module:model/DatasetSpecification} datasetSpecification A new `datasetspecification` to be created.
     * @param {module:api/DatasetspecificationApi~createDataSetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createDataSet(datasetSpecification, callback) {
      let postBody = datasetSpecification;
      // verify the required parameter 'datasetSpecification' is set
      if (datasetSpecification === undefined || datasetSpecification === null) {
        throw new Error("Missing the required parameter 'datasetSpecification' when calling createDataSet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datasetspecifications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataSets operation.
     * @callback module:api/DatasetspecificationApi~getDataSetsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DatasetSpecification>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List All datasetspecifications
     * Gets a list of all `datasetspecification` entities.
     * @param {Object} opts Optional parameters
     * @param {String} opts.username To obtain the results maintained by the MINT project, you must not set up the variable. If you want the results of a user, you must set up the variable with the username
     * @param {module:api/DatasetspecificationApi~getDataSetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DatasetSpecification>}
     */
    getDataSets(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'username': opts['username']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DatasetSpecification];
      return this.apiClient.callApi(
        '/datasetspecifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
