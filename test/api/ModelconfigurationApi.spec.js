/**
 * Model Catalog
 * This is MINT Model Catalog You can find out more about     Model Catalog at [https://w3id.org/mint/modelCatalog/](https://w3id.org/mint/modelCatalog/)
 *
 * OpenAPI spec version: 0.0.2
 * Contact: mosorio@isi.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ModelCatalog);
  }
}(this, function(expect, ModelCatalog) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ModelCatalog.ModelconfigurationApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ModelconfigurationApi', function() {
    describe('createInputsByModelconfiguration', function() {
      it('should call createInputsByModelconfiguration successfully', function(done) {
        //uncomment below and update the code to test createInputsByModelconfiguration
        //instance.createInputsByModelconfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createModelConfiguration', function() {
      it('should call createModelConfiguration successfully', function(done) {
        //uncomment below and update the code to test createModelConfiguration
        //instance.createModelConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createOutputsByModelconfiguration', function() {
      it('should call createOutputsByModelconfiguration successfully', function(done) {
        //uncomment below and update the code to test createOutputsByModelconfiguration
        //instance.createOutputsByModelconfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createParametersByModelconfiguration', function() {
      it('should call createParametersByModelconfiguration successfully', function(done) {
        //uncomment below and update the code to test createParametersByModelconfiguration
        //instance.createParametersByModelconfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteModelConfiguration', function() {
      it('should call deleteModelConfiguration successfully', function(done) {
        //uncomment below and update the code to test deleteModelConfiguration
        //instance.deleteModelConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInputsByModelconfiguration', function() {
      it('should call getInputsByModelconfiguration successfully', function(done) {
        //uncomment below and update the code to test getInputsByModelconfiguration
        //instance.getInputsByModelconfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getModelConfigurations', function() {
      it('should call getModelConfigurations successfully', function(done) {
        //uncomment below and update the code to test getModelConfigurations
        //instance.getModelConfigurations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getModelConfiguraton', function() {
      it('should call getModelConfiguraton successfully', function(done) {
        //uncomment below and update the code to test getModelConfiguraton
        //instance.getModelConfiguraton(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getOutputsByModelconfiguration', function() {
      it('should call getOutputsByModelconfiguration successfully', function(done) {
        //uncomment below and update the code to test getOutputsByModelconfiguration
        //instance.getOutputsByModelconfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getParametersByModelconfiguration', function() {
      it('should call getParametersByModelconfiguration successfully', function(done) {
        //uncomment below and update the code to test getParametersByModelconfiguration
        //instance.getParametersByModelconfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateModelConfiguration', function() {
      it('should call updateModelConfiguration successfully', function(done) {
        //uncomment below and update the code to test updateModelConfiguration
        //instance.updateModelConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
